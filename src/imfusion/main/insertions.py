# pylint: disable=W0622,W0614,W0401
from __future__ import absolute_import, division, print_function
from builtins import *
# pylint: enable=W0622,W0614,W0401

import logging

try:
    from pathlib import Path
except ImportError:
    from pathlib2 import Path

import pandas as pd

from imfusion.aligners.tophat2 import identify_insertions
from imfusion.model import Insertion
from imfusion.util.insertions import filter_blacklist
from imfusion.util.shell import parse_kwarg_str


def setup_parser(subparsers):
    """Adds argparser for insertions sub-command."""

    subparser = subparsers.add_parser('insertions')

    # Required arguments.
    base_group = subparser.add_argument_group('Basic arguments')

    base_group.add_argument('--fastq', nargs='+', type=Path, required=True,
                            help='Path(s) to the samples fastq files.')
    base_group.add_argument('--fastq2', nargs='+', type=Path, default=None,
                            help='Paths to the second pair fastq files '
                                 '(for paired-end sequencing data). Should be '
                                 'given in the same order as for fastq.')

    base_group.add_argument('--reference_index', type=Path, required=True,
                            help='Path to the index of the augmented reference '
                                 'generated by im-fusion build.')
    base_group.add_argument('--reference_gtf', type=Path, required=True,
                            help='Path to the reference gtf file. Typically '
                                 'the same file as used in im-fusion build.')

    base_group.add_argument('--transposon_name', required=True,
                            help='Name of the transposon sequence in the '
                                 'augmented reference. Should reflect the '
                                 'name used for the transposon sequence in the '
                                 'transposon.fa file that was used in '
                                 'im-fusion build.')
    base_group.add_argument('--transposon_features', type=Path, required=True,
                            help='Path to a tab-separated file containing the '
                                 'description of the transposon features '
                                 '(splice acceptors/donors etc.). The file '
                                 'should contain the columns name, start, end, '
                                 'strand and type. Start, end and strand are '
                                 'used to define the position and orientation '
                                 'of the features. The type column indicates '
                                 'whether a feature represents a splice '
                                 'acceptor or donor feature and should contain '
                                 'only SA, SD or empty values. See the data '
                                 'directory on Github for examples.')

    base_group.add_argument('--output_dir', required=True, type=Path,
                            help='The samples output directory.')

    base_group.add_argument('--sample_id', default=None,
                            help='Sample id to use for the given sample. '
                                 'Defaults to the basename of the output '
                                 'directory.')

    filt_group = subparser.add_argument_group('Filtering options')

    filt_group.add_argument('--blacklist', nargs='+',
                            help='IDs of genes for which insertions '
                                 'should be filtered (typically genes that '
                                 'share homologous sequences with the '
                                 'transposon).')
    filt_group.add_argument('--min_flank', type=int, default=20,
                            help='Minimum required size of aligned sequences '
                                 'on either side of the fusion (default = 20).')
    filt_group.add_argument('--min_support', type=int, default=2,
                           help='Minimum number of reads that should support '
                                'any identfied fusions (default = 2).')

    th_group = subparser.add_argument_group('Tophat options')
    th_group.add_argument('--tophat_args', default=None,
                          help='String with extra commandline arguments '
                               'that should be passed to Tophat2 for '
                               'the alignment.')
    th_group.add_argument('--transcriptome_index', type=Path, default=None,
                          help='Path to the transcriptome index. Only needs '
                               'to be provided if the transcriptome index '
                               'location differs from the default relative '
                               'path used by im-fusion build.')

    subparser.set_defaults(main=main)


def main(args):
    """Main function for insertions sub-command."""

    # Create output dir if needed.
    output_dir = args.output_dir
    if not output_dir.exists():
        output_dir.mkdir(parents=True)

    # Prepare fastqs (use fastq2 for paired-end).
    if args.fastq2 is not None:
        fastqs = list(zip(args.fastq, args.fastq2))
    else:
        fastqs = args.fastq

    # Read transposon features.
    transposon_features = pd.read_csv(
        str(args.transposon_features), sep='\t')

    # Get sample_id (defaults to name of output dir).
    sample_id = args.sample_id or output_dir.stem

    # Parse tophat kwargs if given.
    if args.tophat_args is None:
        tophat_kws = None
    else:
        tophat_kws = parse_kwarg_str(args.tophat_args)

    # Identify insertions using Tophat2.
    logging.info('Identifying insertions using Tophat2')
    insertions = identify_insertions(
        fastqs=fastqs,
        index_path=args.reference_index,
        reference_gtf_path=args.reference_gtf,
        transposon_name=args.transposon_name,
        transposon_features=transposon_features,
        sample_id=sample_id,
        work_dir=output_dir,
        min_flank=args.min_flank,
        tophat_kws=tophat_kws,
        transcriptome_index=args.transcriptome_index)

    # Filter insertions for blacklist.
    if args.blacklist is not None:
        logging.info('Filtering blacklisted genes')
        insertions = filter_blacklist(insertions, set(args.blacklist),
                                      reference_gtf=args.reference_gtf)

    # Filter on depth.
    logging.info('Filtering for depth')

    is_paired = args.fastq2 is not None
    supp_score = 'spanning_mates' if is_paired else 'spanning_reads'

    insertions = (ins for ins in insertions
                  if getattr(ins, supp_score) >= args.min_support)

    # Convert to frame.
    ins_frame = Insertion.to_frame(insertions)

    # Write outputs.
    logging.info('Writing output files')
    ins_frame.to_csv(str(output_dir / 'insertions.txt'), sep='\t', index=False)
